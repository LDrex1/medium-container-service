name: Validation and Integration and Deployment
on:
  push:
    branches: [main, staging]
jobs:
  validation:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Code Linting
        id: lint
        uses: super-linter/super-linter@v7.4.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          VALIDATE_JSX_PRETTIER: false
          VALIDATE_MARKDOWN_PRETTIER: false
          VALIDATE_YAML_PRETTIER: false
          VALIDATE_HTML_PRETTIER: false
          VALIDATE_JAVASCRIPT_PRETTIER: false
          VALIDATE_JSON_PRETTIER: false
          VALIDATE_CSS_PRETTIER: false
          VALIDATE_CSS: false
          VALIDATE_ENV: false
          VALIDATE_MARKDOWN: false
          VALIDATE_NATURAL_LANGUAGE: false
          DISABLE_ERRORS: true

  docker:
    runs-on: ubuntu-latest
    needs: validation
    defaults:
      run:
        shell: bash
    env:
      BACKEND_SERVICE_NAME: backend
      FRONTEND_IMAGE_NAME: frontend
      BACKEND_FOLDER: backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get short SHA
        id: sha
        run: echo "SHA=$(echo $GITHUB_SHA | cut -c1-6)" >> $GITHUB_OUTPUT

      - name: Log in to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Build backend
        run: docker compose -f backend/docker-compose.yaml build ${{env.BACKEND_SERVICE_NAME}}
      - name: Tag backend image
        run: |
          docker tag ${{env.BACKEND_FOLDER}}-${{env.BACKEND_SERVICE_NAME}} ${{secrets.DOCKER_USERNAME}}/backend-app:${{steps.sha.outputs.SHA}}
      - name: Push backend image to docker hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/backend-app:${{steps.sha.outputs.SHA}}

    outputs:
      sha: ${{steps.sha.outputs.SHA}}

  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: docker
    env:
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      SHA: ${{needs.docker.outputs.sha}}

    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/aws_test.pem
          cat ~/.ssh/aws_test.pem
          chmod 600 ~/.ssh/aws_test.pem
      - name: SSH into instance
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws_test.pem ${{secrets.EC2_HOST}}@${{secrets.EC2_IP}} <<EOF
          cd /home/dami/ecorm/website
          cat docker-compose.yaml
          sudo sed -i.bak "s|image: $DOCKER_USERNAME/backend-app.*|image: $DOCKER_USERNAME/backend-app:$SHA|" docker-compose.yaml
          cat docker-compose.yaml
          docker-compose pull backend
          docker-compose up -d --no-deps backend
          echo "Waiting for services to settle"
          sleep 40
          echo "Showing running containers"
          docker ps
          echo "showing resource usage"
          timeout 30 docker stats || true
          EOF
